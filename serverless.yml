service: movie-database-api

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser # This is my local AWS config account name
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  stage: dev
  environment:
    tableName: ${self:custom.tableName}
    cachedTableName: ${self:custom.cachedTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "*"

plugins:
  - serverless-webpack

package:
  individually: true

# The real stuff
functions:
  getAllMoviesCinemaWorld:
    handler: lambdas/endpoints/cinemaworld/getAllMovies.handler
    events:
      - http:
          path: api/cinemaworld/movies
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getMovieCinemaWorld:
    handler: lambdas/endpoints/cinemaworld/getMovie.handler
    events:
      - http:
          path: api/cinemaworld/movie/{ID}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  saveMovieCinemaWorld:
    handler: lambdas/endpoints/cinemaworld/addMovie.handler
    events:
      - http:
          path: api/cinemaworld/movie
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getAllMoviesFilmWorld:
    handler: lambdas/endpoints/filmworld/getAllMovies.handler
    events:
      - http:
          path: api/filmworld/movies
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getMovieFilmWorld:
    handler: lambdas/endpoints/filmworld/getMovie.handler
    events:
      - http:
          path: api/filmworld/movie/{ID}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  saveMovieFilmWorld:
    handler: lambdas/endpoints/filmworld/addMovie.handler
    events:
      - http:
          path: api/filmworld/movie
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  saveMovieInBulk:
    handler: lambdas/endpoints/addMovieToSQS.handler
    events:
      - http:
          path: api/movies/
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - schedule:
          rate: cron(*/2 * * * ? *)
          enabled: true
  # Function to consume the SQS
  addMovies:
    handler: lambdas/endpoints/addMoviesInBulk.handler
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MovieDataUploadQueue
              - Arn

custom:
  tableName: movies-rates
  cachedTableName: movie-rates-cached
  webpackIncludeModules: true; # Bundle external modules used
# environment variables here
# environment:

# CloudFormation resource templates
resources:
  Resources:
    MoviesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    MovieDataUploadQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "MovieDataUploadQueue"
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: movie-user-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: movie-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
